diff -rupN aircrack-ng-1.2-rc3-original/src/airodump-ng.c aircrack-ng-1.2-rc3-new/src/airodump-ng.c
--- aircrack-ng-1.2-rc3-original/src/airodump-ng.c	2015-11-08 20:44:06.000000000 +0100
+++ aircrack-ng-1.2-rc3-new/src/airodump-ng.c	2015-12-22 07:38:23.491037289 +0100
@@ -126,7 +126,7 @@ void textcolor(int attr, int fg, int bg)
 {	char command[13];
 
 	/* Command is the control command to the terminal */
-	sprintf(command, "%c[%d;%d;%dm", 0x1B, attr, fg + 30, bg + 40);
+	snprintf(command, sizeof(command), "%c[%d;%d;%dm", 0x1B, attr, fg + 30, bg + 40);
 	fprintf(stderr, "%s", command);
 	fflush(stderr);
 }
@@ -135,7 +135,7 @@ void textcolor_fg(int fg)
 {	char command[13];
 
 	/* Command is the control command to the terminal */
-	sprintf(command, "\033[%dm", fg + 30);
+	snprintf(command, sizeof(command), "\033[%dm", fg + 30);
 	fprintf(stderr, "%s", command);
 	fflush(stderr);
 }
@@ -144,7 +144,7 @@ void textcolor_bg(int bg)
 {	char command[13];
 
 	/* Command is the control command to the terminal */
-	sprintf(command, "\033[%dm", bg + 40);
+	snprintf(command, sizeof(command), "\033[%dm", bg + 40);
 	fprintf(stderr, "%s", command);
 	fflush(stderr);
 }
@@ -153,7 +153,7 @@ void textstyle(int attr)
 {	char command[13];
 
 	/* Command is the control command to the terminal */
-	sprintf(command, "\033[%im", attr);
+	snprintf(command, sizeof(command), "\033[%im", attr);
 	fprintf(stderr, "%s", command);
 	fflush(stderr);
 }
@@ -663,7 +663,7 @@ char usage[] =
 "      --wps                 : Display WPS information (if any)\n"
 "      --output-format\n"
 "                  <formats> : Output format. Possible values:\n"
-"                              pcap, ivs, csv, gps, kismet, netxml\n"
+"                              pcap, ivs, csv, json, gps, kismet, netxml\n"
 "      --ignore-negative-one : Removes the message that says\n"
 "                              fixed channel <interface>: -1\n"
 "      --write-interval\n"
@@ -782,7 +782,12 @@ void update_rx_quality( )
                     ap_cur->fmiss += missed_frames;
                 }
 
-                ap_cur->rx_quality = ((float)((float)ap_cur->fcapt / ((float)ap_cur->fcapt + (float)ap_cur->fmiss)) * 100.0);
+                ap_cur->rx_quality = ((float)((float)ap_cur->fcapt / ((float)ap_cur->fcapt + (float)ap_cur->fmiss)) * 
+#if defined(__x86_64__) && defined(__CYGWIN__)
+			(0.0f + 100));
+#else
+			100.0f);
+#endif
             }
             else ap_cur->rx_quality = 0; /* no packets -> zero quality */
 
@@ -877,7 +882,20 @@ int dump_initialize( char *prefix, int i
 			return( 1 );
 		}
 	}
+    /* create the output JSON file */
+ 	if(G.output_format_json){
+		memset(ofn,0,ofn_len);
+		snprintf( ofn,  ofn_len, "%s-%02d.%s",
+				  prefix, G.f_index, AIRODUMP_NG_JSON_EXT);
 
+		if( ( G.f_json= fopen( ofn, "wb+" ) ) == NULL )
+		{
+			perror( "fopen failed" );
+			fprintf( stderr, "Could not create \"%s\".\n", ofn );
+			free( ofn );
+			return( 1 );
+		}
+	}
     /* create the output Kismet CSV file */
 	if (G.output_format_kismet_csv) {
 		memset(ofn, 0, ofn_len);
@@ -1015,7 +1033,11 @@ int update_dataps()
     {
         sec = (tv.tv_sec - ap_cur->tv.tv_sec);
         usec = (tv.tv_usec - ap_cur->tv.tv_usec);
-        pause = (((float)(sec*1000000.0f + usec))/(1000000.0f));
+#if defined(__x86_64__) && defined(__CYGWIN__)
+        pause = (((float)(sec*(0.0f + 1000000) + usec))/((0.0f + 1000000)));
+#else
+	pause = (((float)(sec*1000000.0f + usec))/(1000000.0f));	
+#endif
         if( pause > 2.0f )
         {
             diff = ap_cur->nb_data - ap_cur->nb_data_old;
@@ -1033,7 +1055,11 @@ int update_dataps()
     {
         sec = (tv.tv_sec - na_cur->tv.tv_sec);
         usec = (tv.tv_usec - na_cur->tv.tv_usec);
-        pause = (((float)(sec*1000000.0f + usec))/(1000000.0f));
+#if defined(__x86_64__) && defined(__CYGWIN__)
+        pause = (((float)(sec*(0.0f + 1000000) + usec))/((0.0f + 1000000)));
+#else
+	pause = (((float)(sec*1000000.0f + usec))/(1000000.0f));
+#endif
         if( pause > 2.0f )
         {
             diff = na_cur->ack - na_cur->ack_old;
@@ -3708,7 +3734,7 @@ char * format_text_for_csv( const unsign
 		}
 		else
 		{
-			ret[pos++] = 'x';
+		        ret[pos++] = 'x';
 			ret[pos++] = hex_table[input[i]/16];
 			ret[pos++] = hex_table[input[i]%16];
 		}
@@ -3726,6 +3752,253 @@ char * format_text_for_csv( const unsign
 	return ret;
 }
 
+int dump_write_json( void )
+{
+        int i, n, probes_written;
+        struct tm *ltime;
+        struct AP_info *ap_cur;
+        struct ST_info *st_cur;
+        char * temp;
+    
+        if (! G.record_data || !G.output_format_json)
+    	        return 0;
+
+        //append
+        fseek( G.f_json, 0, SEEK_END );
+    
+        //append AP info
+        ap_cur = G.ap_1st;
+        while( ap_cur != NULL )
+        {
+                if (time( NULL ) - ap_cur->tlast > G.berlin )
+                {
+                        ap_cur = ap_cur->next;
+                        continue;
+                }
+
+                if( memcmp( ap_cur->bssid, BROADCAST, 6 ) == 0 )
+                {
+                        ap_cur = ap_cur->next;
+                        continue;
+                }
+
+                if(ap_cur->security != 0 && G.f_encrypt != 0 && ((ap_cur->security & G.f_encrypt) == 0))
+                {
+                        ap_cur = ap_cur->next;
+                        continue;
+                }
+
+                if(is_filtered_essid(ap_cur->essid))
+                {
+                        ap_cur = ap_cur->next;
+                        continue;
+                }
+
+	        fprintf( G.f_json, "{\"BSSID\":\"%02X:%02X:%02X:%02X:%02X:%02X\", ",
+                        ap_cur->bssid[0], ap_cur->bssid[1],
+                        ap_cur->bssid[2], ap_cur->bssid[3],
+                        ap_cur->bssid[4], ap_cur->bssid[5] );
+
+	        ltime = localtime( &ap_cur->tinit );
+	        fprintf( G.f_json, "\"FirstTimeSeen\":\"%04d-%02d-%02d %02d:%02d:%02d\", ",
+                        1900 + ltime->tm_year, 1 + ltime->tm_mon,
+                        ltime->tm_mday, ltime->tm_hour,
+                        ltime->tm_min,  ltime->tm_sec );
+
+	        ltime = localtime( &ap_cur->tlast );
+
+                fprintf( G.f_json, "\"LastTimeSeen\":\"%04d-%02d-%02d %02d:%02d:%02d\", ",
+                        1900 + ltime->tm_year, 1 + ltime->tm_mon,
+                        ltime->tm_mday, ltime->tm_hour,
+                        ltime->tm_min,  ltime->tm_sec );
+	 
+	        fprintf( G.f_json, "\"channel\":%2d, \"max_speed\":\"%3d\",",
+                        ap_cur->channel,
+                        ap_cur->max_speed );       
+ 
+                fprintf( G.f_json, "\"Privacy\":");
+
+	        if( (ap_cur->security & (STD_OPN|STD_WEP|STD_WPA|STD_WPA2)) == 0) fprintf( G.f_json, "\"\"" );
+                else
+                {
+                        fprintf( G.f_json, "\"" );
+                        if( ap_cur->security & STD_WPA2 ) fprintf( G.f_json, "WPA2" );
+                        if( ap_cur->security & STD_WPA  ) fprintf( G.f_json, "WPA" );
+                        if( ap_cur->security & STD_WEP  ) fprintf( G.f_json, "WEP" );
+                        if( ap_cur->security & STD_OPN  ) fprintf( G.f_json, "OPN" );
+                        fprintf( G.f_json, "\"" );
+                }
+                fprintf( G.f_json, ",");
+
+	        if( (ap_cur->security & (ENC_WEP|ENC_TKIP|ENC_WRAP|ENC_CCMP|ENC_WEP104|ENC_WEP40)) == 0 ) fprintf( G.f_json, "\"Cipher\":\"\" ");
+                else
+                {
+                        fprintf( G.f_json, " \"Cipher\":\"" );
+                        if( ap_cur->security & ENC_CCMP   ) fprintf( G.f_json, "CCMP ");
+                        if( ap_cur->security & ENC_WRAP   ) fprintf( G.f_json, "WRAP ");
+                        if( ap_cur->security & ENC_TKIP   ) fprintf( G.f_json, "TKIP ");
+                        if( ap_cur->security & ENC_WEP104 ) fprintf( G.f_json, "WEP104 ");
+                        if( ap_cur->security & ENC_WEP40  ) fprintf( G.f_json, "WEP40 ");
+                        if( ap_cur->security & ENC_WEP    ) fprintf( G.f_json, "WEP ");
+                        fprintf( G.f_json, "\"");
+                }
+                fprintf( G.f_json, ",");
+
+
+                if( (ap_cur->security & (AUTH_OPN|AUTH_PSK|AUTH_MGT)) == 0 ) fprintf( G.f_json, " \"Authentication\":\"\"");
+                else
+                {
+                        if( ap_cur->security & AUTH_MGT   ) fprintf( G.f_json, " \"Authentication\":\"MGT\"");
+                        if( ap_cur->security & AUTH_PSK   )
+	                {
+                                if( ap_cur->security & STD_WEP )
+			                fprintf( G.f_json, "\"Authentication\":\"SKA\"");
+			        else
+		                        fprintf( G.f_json, "\"Authentication\":\"PSK\"");
+		        }
+                        if( ap_cur->security & AUTH_OPN   ) fprintf( G.f_json, " \"Authentication\":\"OPN\"");
+                }
+
+                fprintf( G.f_json, ", \"Power\":%3d, \"#beacons\":%8ld,\"#IV\":%8ld, ",
+                        ap_cur->avg_power,
+                        ap_cur->nb_bcn,
+                        ap_cur->nb_data );
+
+                fprintf( G.f_json, "\"LANIP\":\"%3d.%3d.%3d.%3d\", ",
+                        ap_cur->lanip[0], ap_cur->lanip[1],
+                        ap_cur->lanip[2], ap_cur->lanip[3] );
+
+                fprintf( G.f_json, "\"ID-length\":%3d, ", ap_cur->ssid_length);
+
+	        temp = format_text_for_csv(ap_cur->essid, ap_cur->ssid_length);
+                fprintf( G.f_json, "\"ESSID\":\"%s\", ", temp );
+	        free(temp);
+        
+                if(ap_cur->key != NULL)
+                {
+                        fprintf( G.f_json, "\"Key\":\"");
+                        for(i=0; i<(int)strlen(ap_cur->key); i++)
+                        {
+                                fprintf( G.f_json, "%02X", ap_cur->key[i]);
+                                if(i<(int)(strlen(ap_cur->key)-1))
+                                        fprintf( G.f_json, ":");
+                        }
+                        fprintf(G.f_json, "\",");
+                }
+
+                if ( G.show_manufacturer)
+                {
+	                fprintf(G.f_json,"\"Manufacturer\":\"%s\", ",ap_cur->manuf);
+	        }
+       
+                //terminate json AP data
+                fprintf(G.f_json,"\"wlan_type\":\"AP\",\"timestamp\":\"%d\"}",(int)time(NULL));
+	        fprintf(G.f_json, "\r\n");
+                fflush( G.f_json);
+                ap_cur = ap_cur->next;
+        }
+
+        //append STA info
+        st_cur = G.st_1st;
+        while( st_cur != NULL )
+        {
+                ap_cur = st_cur->base;
+
+                if( ap_cur->nb_pkt < 2 )
+                {
+                        st_cur = st_cur->next;
+                        continue;
+                }
+                
+                if (time( NULL ) - st_cur->tlast > G.berlin )
+                {
+                        st_cur = st_cur->next;
+                        continue;
+                }
+
+                fprintf( G.f_json, "{\"StationMAC\":\"%02X:%02X:%02X:%02X:%02X:%02X\", ",
+                        st_cur->stmac[0], st_cur->stmac[1],
+                        st_cur->stmac[2], st_cur->stmac[3],
+                        st_cur->stmac[4], st_cur->stmac[5] );
+
+                ltime = localtime( &st_cur->tinit );
+
+                fprintf( G.f_json, "\"FirstTimeSeen\":\"%04d-%02d-%02d %02d:%02d:%02d\", ",
+                        1900 + ltime->tm_year, 1 + ltime->tm_mon,
+                        ltime->tm_mday, ltime->tm_hour,
+                        ltime->tm_min,  ltime->tm_sec );
+
+                ltime = localtime( &st_cur->tlast );
+
+                fprintf( G.f_json, "\"LastTimeSeen\":\"%04d-%02d-%02d %02d:%02d:%02d\", ",
+                        1900 + ltime->tm_year, 1 + ltime->tm_mon,
+                        ltime->tm_mday, ltime->tm_hour,
+                        ltime->tm_min,  ltime->tm_sec );
+
+                fprintf( G.f_json, "\"Power\":%3d, \"#packets\":%8ld, ",
+                        st_cur->power,
+                        st_cur->nb_pkt );
+
+                if( ! memcmp( ap_cur->bssid, BROADCAST, 6 ) )
+                        fprintf( G.f_json, "\"BSSID\":\"(not associated)\" ," );
+                else
+                        fprintf( G.f_json, "\"BSSID\":\"%02X:%02X:%02X:%02X:%02X:%02X\",",
+                                ap_cur->bssid[0], ap_cur->bssid[1],
+                                ap_cur->bssid[2], ap_cur->bssid[3],
+                                ap_cur->bssid[4], ap_cur->bssid[5] );
+
+                //add ESSID  
+                fprintf(G.f_json,"\"ESSID\":\"%s\", ",ap_cur->essid);
+	
+
+	        probes_written = 0;
+                fprintf( G.f_json, "\"ProbedESSIDs\":\"");
+                int pnum = 0;
+                for( i = 0, n = 0; i < NB_PRB; i++ )
+                {
+                        if( st_cur->ssid_length[i] == 0 )
+                                continue;
+
+	                temp = format_text_for_csv(st_cur->probes[i], st_cur->ssid_length[i]);
+
+	                if( probes_written == 0)
+	                {
+		                fprintf( G.f_json, "%s", temp);
+		                probes_written = 1;
+	                }
+	                else
+	                {
+		                fprintf( G.f_json, ",%s", temp);
+	                }
+                        pnum=pnum+1;
+	                free(temp);
+                }
+                fprintf(G.f_json, "\",");
+                //add number of probes
+                fprintf(G.f_json, "\"#probes\":%d,",pnum);
+       
+      
+       
+                //add manufacturer for STA
+                if ( G.show_manufacturer)
+	        {
+	    
+	                fprintf(G.f_json,"\"Manufacturer\":\"%s\", ",st_cur->manuf);
+	        }
+       
+       
+       
+                //terminate json client data
+                fprintf(G.f_json,"\"wlan_type\":\"station\",\"timestamp\":\"%d\"}",(int)time(NULL));
+                fprintf( G.f_json, "\r\n" );
+                fflush( G.f_json);
+                st_cur = st_cur->next;
+        }
+        fflush( G.f_json);
+    
+        return 0;
+}
+
 int dump_write_csv( void )
 {
     int i, n, probes_written;
@@ -3903,15 +4176,13 @@ int dump_write_csv( void )
                      ap_cur->bssid[2], ap_cur->bssid[3],
                      ap_cur->bssid[4], ap_cur->bssid[5] );
 
-	
-
 	probes_written = 0;
         for( i = 0, n = 0; i < NB_PRB; i++ )
         {
             if( st_cur->ssid_length[i] == 0 )
                 continue;
 
-	    temp = format_text_for_csv(st_cur->probes[i], st_cur->ssid_length[i]);
+	    temp = format_text_for_csv((unsigned char *)st_cur->probes[i], st_cur->ssid_length[i]);
 
 	    if( probes_written == 0)
 	    {
@@ -4126,12 +4397,12 @@ int dump_write_kismet_netxml_client_info
 					"\t\t\t\t<max-rate>54.000000</max-rate>\n"
 					"\t\t\t\t<packets>1</packets>\n"
 					"\t\t\t\t<encryption>None</encryption>\n");
-		essid = sanitize_xml(client->probes[i], client->ssid_length[i]);
+		essid = sanitize_xml((unsigned char *)client->probes[i], client->ssid_length[i]);
 		if (essid != NULL) {
 			fprintf( G.f_kis_xml, "\t\t\t\t<ssid>%s</ssid>\n", essid);
 			free(essid);
 		}
-		
+
 		fprintf( G.f_kis_xml, "\t\t\t</SSID>\n");
 
 		++nb_probes_written;
@@ -4155,7 +4426,12 @@ int dump_write_kismet_netxml_client_info
 
 	/* Rate: inaccurate because it's the latest rate seen */
 	client_max_rate = ( client->rate_from > client->rate_to ) ? client->rate_from : client->rate_to ;
-	fprintf(G.f_kis_xml, "\t\t\t<maxseenrate>%.6f</maxseenrate>\n", client_max_rate / 1000000.0 );
+	fprintf(G.f_kis_xml, "\t\t\t<maxseenrate>%.6f</maxseenrate>\n", client_max_rate / 
+#if defined(__x86_64__) && defined(__CYGWIN__)
+		(0.0f + 1000000) );
+#else
+		1000000.0 );
+#endif
 
 	/* Those 2 lines always stays the same */
 	fprintf(G.f_kis_xml, "\t\t\t<carrier>IEEE 802.11b+</carrier>\n");
@@ -4488,7 +4764,12 @@ int dump_write_kismet_netxml( void )
 
 			/* Rate: inaccurate because it's the latest rate seen */
 			client_max_rate = ( st_cur->rate_from > st_cur->rate_to ) ? st_cur->rate_from : st_cur->rate_to ;
-			fprintf(G.f_kis_xml, "\t\t<maxseenrate>%.6f</maxseenrate>\n", client_max_rate / 1000000.0 );
+			fprintf(G.f_kis_xml, "\t\t<maxseenrate>%.6f</maxseenrate>\n", client_max_rate / 
+#if defined(__x86_64__) && defined(__CYGWIN__)
+				(0.0f + 1000000) );
+#else
+				1000000.0 );
+#endif
 
 			fprintf(G.f_kis_xml, "\t\t<carrier>IEEE 802.11b+</carrier>\n");
 			fprintf(G.f_kis_xml, "\t\t<encoding>CCK</encoding>\n");
@@ -4895,7 +5176,7 @@ static int json_get_value_for_name( cons
 		if(*cursor != '\0')
 		{
 			cursor++;
-			while(isspace(*cursor) && *cursor != '\0')
+			while(isspace((int)(*cursor)) && *cursor != '\0')
 			{
 				cursor++;
 			}
@@ -4949,7 +5230,7 @@ static int json_get_value_for_name( cons
 		else
 		{
 			/* Number, supposedly.  Copy as-is. */
-			while(*cursor != ',' && *cursor != '}' && !isspace(*cursor))
+			while(*cursor != ',' && *cursor != '}' && !isspace((int)(*cursor)))
 			{
 				*vcursor = *cursor;
 				cursor++; vcursor++;
@@ -5186,54 +5467,63 @@ void gps_tracker(pid_t parent)
 void sighandler( int signum)
 {
 	ssize_t unused;
-    int card=0;
-
-    signal( signum, sighandler );
+	int card = 0;
+	signal( signum, sighandler );
 
-    if( signum == SIGUSR1 )
-    {
+	if( signum == SIGUSR1 )
+	{
 		unused = read( G.cd_pipe[0], &card, sizeof(int) );
-        if(G.freqoption)
-            unused = read( G.ch_pipe[0], &(G.frequency[card]), sizeof( int ) );
-        else
-            unused = read( G.ch_pipe[0], &(G.channel[card]), sizeof( int ) );
-    }
 
-    if( signum == SIGUSR2 )
-        unused = read( G.gc_pipe[0], &G.gps_loc, sizeof( float ) * 5 );
+		if(G.freqoption)
+			unused = read( G.ch_pipe[0], &(G.frequency[card]), sizeof( int ) );
+		else
+			unused = read( G.ch_pipe[0], &(G.channel[card]), sizeof( int ) );
+	}
 
-    if( signum == SIGINT || signum == SIGTERM )
-    {
-	reset_term();
-        alarm( 1 );
-        G.do_exit = 1;
-        signal( SIGALRM, sighandler );
-        dprintf( STDOUT_FILENO, "\n" );
-    }
+	if( signum == SIGUSR2 )
+		unused = read( G.gc_pipe[0], &G.gps_loc, sizeof( float ) * 5 );
 
-    if( signum == SIGSEGV )
-    {
-        fprintf( stderr, "Caught signal 11 (SIGSEGV). Please"
-                         " contact the author!\33[?25h\n\n" );
-        fflush( stdout );
-        exit( 1 );
-    }
+	if( signum == SIGINT || signum == SIGTERM )
+	{
+		reset_term();
+		alarm( 1 );
+		G.do_exit = 1;
+		signal( SIGALRM, sighandler );
+#if defined(__sun__)
+		fprintf(stdout, "\n" );
+#else
+		dprintf( STDOUT_FILENO, "\n" );
+#endif
+	}
 
-    if( signum == SIGALRM )
-    {
-        dprintf( STDERR_FILENO, "Caught signal 14 (SIGALRM). Please"
+	if( signum == SIGSEGV )
+	{
+		fprintf( stderr, "Caught signal 11 (SIGSEGV). Please"
+				" contact the author!\33[?25h\n\n" );
+		fflush( stdout );
+		exit( 1 );
+	}
+
+	if( signum == SIGALRM )
+	{
+#if defined(__sun__)
+		fprintf(stdout,
+#else
+		dprintf( STDERR_FILENO,
+#endif
+			 "Caught signal 14 (SIGALRM). Please"
                          " contact the author!\33[?25h\n\n" );
-        _exit( 1 );
-    }
+		_exit( 1 );
+	}
 
-    if( signum == SIGCHLD )
-        wait( NULL );
+	if( signum == SIGCHLD )
+		wait( NULL );
 
-    if( signum == SIGWINCH )
-    {
-        fprintf( stderr, "\33[2J" );
-        fflush( stdout );
-    }
+	if( signum == SIGWINCH )
+	{
+		fprintf( stderr, "\33[2J" );
+		fflush( stdout );
+	}
 }
 
 int send_probe_request(struct wif *wi)
@@ -6224,6 +6514,7 @@ int main( int argc, char *argv[] )
 
 	G.output_format_pcap = 1;
     G.output_format_csv = 1;
+    G.output_format_json = 1;
     G.output_format_kismet_csv = 1;
     G.output_format_kismet_netxml = 1;
     G.file_write_interval = 5; // Write file every 5 seconds by default
@@ -6474,6 +6765,7 @@ int main( int argc, char *argv[] )
 
 					G.output_format_pcap = 0;
 					G.output_format_csv = 0;
+					G.output_format_json = 0;
 					G.output_format_kismet_csv = 0;
     				G.output_format_kismet_netxml = 0;
 				}
@@ -6636,6 +6928,7 @@ int main( int argc, char *argv[] )
 
 					G.output_format_pcap = 0;
 					G.output_format_csv = 0;
+					G.output_format_json = 0;
 					G.output_format_kismet_csv = 0;
     				G.output_format_kismet_netxml = 0;
 				}
@@ -6647,6 +6940,9 @@ int main( int argc, char *argv[] )
 						if (strncasecmp(output_format_string, "csv", 3) == 0
 							|| strncasecmp(output_format_string, "txt", 3) == 0) {
 							G.output_format_csv = 1;
+						}else if (strncasecmp(output_format_string,"json",4) == 0){
+							G.output_format_json=1;
+							
 						} else if (strncasecmp(output_format_string, "pcap", 4) == 0
 							|| strncasecmp(output_format_string, "cap", 3) == 0) {
                             if (ivs_only) {
@@ -6676,11 +6972,13 @@ int main( int argc, char *argv[] )
 						} else if (strncasecmp(output_format_string, "default", 6) == 0) {
 							G.output_format_pcap = 1;
 							G.output_format_csv = 1;
+							G.output_format_json=1;
 							G.output_format_kismet_csv = 1;
 							G.output_format_kismet_netxml = 1;
 						} else if (strncasecmp(output_format_string, "none", 6) == 0) {
 							G.output_format_pcap = 0;
 							G.output_format_csv = 0;
+							G.output_format_json = 0;
 							G.output_format_kismet_csv = 0;
     						G.output_format_kismet_netxml = 0;
 
@@ -7001,7 +7299,8 @@ usage:
             /* update the text output files */
 
             tt1 = time( NULL );
-            if (G. output_format_csv)  dump_write_csv();
+            if (G.output_format_csv)  dump_write_csv();
+	    if (G.output_format_json) dump_write_json();
             if (G.output_format_kismet_csv) dump_write_kismet_csv();
             if (G.output_format_kismet_netxml) dump_write_kismet_netxml();
         }
@@ -7211,8 +7510,8 @@ usage:
 
             if( ioctl( 0, TIOCGWINSZ, &(G.ws) ) < 0 )
             {
-                G.ws.ws_row = 25;
-                G.ws.ws_col = 80;
+                G.ws.ws_row = 50;
+                G.ws.ws_col = 120;
             }
 
             if( G.ws.ws_col <   1 ) G.ws.ws_col =   1;
@@ -7322,12 +7621,14 @@ usage:
         wi_close(wi[i]);
 
     if (G.record_data) {
-        if ( G. output_format_csv)  dump_write_csv();
+        if ( G.output_format_csv)  dump_write_csv();
+	if ( G.output_format_json) dump_write_json();
         if ( G.output_format_kismet_csv) dump_write_kismet_csv();
         if ( G.output_format_kismet_netxml) dump_write_kismet_netxml();
 
         if ( G. output_format_csv || G.f_txt != NULL ) fclose( G.f_txt );
-        if ( G.output_format_kismet_csv || G.f_kis != NULL ) fclose( G.f_kis );
+        if ( G. output_format_json|| G.f_json!= NULL ) fclose( G.f_json);
+	if ( G.output_format_kismet_csv || G.f_kis != NULL ) fclose( G.f_kis );
         if ( G.output_format_kismet_netxml || G.f_kis_xml != NULL )
         {
 			fclose( G.f_kis_xml );
diff -rupN aircrack-ng-1.2-rc3-original/src/airodump-ng.h aircrack-ng-1.2-rc3-new/src/airodump-ng.h
--- aircrack-ng-1.2-rc3-original/src/airodump-ng.h	2015-03-30 15:54:39.000000000 +0200
+++ aircrack-ng-1.2-rc3-new/src/airodump-ng.h	2015-12-22 07:38:26.531037397 +0100
@@ -41,7 +41,7 @@
 #define DEFAULT_CWIDTH  20 /* 20 MHz channels by default */
 
 #define NB_PWR  5       /* size of signal power ring buffer */
-#define NB_PRB 10       /* size of probed ESSID ring buffer */
+#define NB_PRB 1000       /* size of probed ESSID ring buffer */
 
 #define MAX_CARDS 8	/* maximum number of cards to capture from */
 
@@ -123,15 +123,16 @@ extern int get_ram_size(void);
 char *get_manufacturer(unsigned char mac0, unsigned char mac1, unsigned char mac2);
 
 #define AIRODUMP_NG_CSV_EXT "csv"
+#define AIRODUMP_NG_JSON_EXT "json"
 #define KISMET_CSV_EXT "kismet.csv"
 #define KISMET_NETXML_EXT "kismet.netxml"
 #define AIRODUMP_NG_GPS_EXT "gps"
 #define AIRODUMP_NG_CAP_EXT "cap"
 
-#define NB_EXTENSIONS 6
+#define NB_EXTENSIONS 7
 
 const unsigned char llcnull[4] = {0, 0, 0, 0};
-char *f_ext[NB_EXTENSIONS] = { AIRODUMP_NG_CSV_EXT, AIRODUMP_NG_GPS_EXT, AIRODUMP_NG_CAP_EXT, IVS2_EXTENSION, KISMET_CSV_EXT, KISMET_NETXML_EXT };
+char *f_ext[NB_EXTENSIONS] = { AIRODUMP_NG_CSV_EXT, AIRODUMP_NG_JSON_EXT, AIRODUMP_NG_GPS_EXT, AIRODUMP_NG_CAP_EXT, IVS2_EXTENSION, KISMET_CSV_EXT, KISMET_NETXML_EXT };
 
 extern const unsigned long int crc_tbl[256];
 extern const unsigned char crc_chop_tbl[256][4];
@@ -350,6 +351,7 @@ struct globals
 
     int f_index;            /* outfiles index       */
     FILE *f_txt;            /* output csv file      */
+    FILE *f_json;           /* output json file     */
     FILE *f_kis;            /* output kismet csv file      */
     FILE *f_kis_xml;        /* output kismet netxml file */
     FILE *f_gps;            /* output gps file      */
@@ -447,6 +449,7 @@ struct globals
 
     int output_format_pcap;
     int output_format_csv;
+    int output_format_json;
     int output_format_kismet_csv;
     int output_format_kismet_netxml;
     pthread_t input_tid;
